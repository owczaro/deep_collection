import 'package:deep_collection/deep_map.dart';
import 'package:test/test.dart';

void main() {
  final map = {
    'c': 'cc',
    'a': 'aa',
    'x': {
      'a',
      'b',
      'c',
      [
        'c',
        'a',
        'b',
      ],
    },
    'g': [
      'c',
      'a',
      'b',
    ],
    'b': {
      'a': {
        'a',
        {
          'a',
          'b',
          'c',
        },
        [
          'c',
          'a',
          'b',
        ],
        {
          'c': 'cc',
          'a': 'aa',
        },
      },
      'x': 'xx',
      'z': {
        'c': 'cc',
        'a': 'aa',
        'd': [
          'c',
          'a',
          'b',
        ],
      },
      'y': [
        {
          'b': 'bb',
          'a': 'aa',
        },
        'a',
        [
          'a',
          'b',
          'c',
        ],
        {
          'x',
          'z',
          {
            'c': 'cc',
            'b': 'bb',
            'a': 'aa',
          },
        },
      ],
    },
    'f': {
      'b': 'bb',
      'a': 'aa',
    },
    3: 1,
    1: 3,
    true: false,
    null: true,
    false: true,
    4: {
      1,
      3,
      2,
      [
        3,
        1,
        2,
      ],
    },
    5: [
      3,
      5,
      5,
      2,
    ],
    2: {
      1: {
        1,
        {
          7,
          2,
          3,
        },
        [
          3,
          3,
          1,
          2,
        ],
        {
          3: 3,
          1: 1,
        },
      },
      4: 9,
      6: {
        3: 3,
        1: 1,
        7: [
          3,
          1,
          1,
          1,
          2,
        ],
      },
      8: [
        {
          2: 2,
          1: 1,
        },
        1,
        [
          1,
          2,
          3,
          1,
          2,
          3,
        ],
        {
          4,
          6,
          {
            3: 3,
            2: 2,
            1: 1,
          },
        },
      ],
    },
    9: {
      2: 2,
      1: 1,
    },
    3.3: 1.1,
    1.1: 3.3,
    4.4: {
      1.1,
      3.3,
      2.2,
      [
        3.3,
        1.1,
        2.2,
      ],
    },
    5.5: [
      3.3,
      5.5,
      2.2,
    ],
    2.2: {
      1.1: {
        1.1,
        {
          7.7,
          2.2,
          3.3,
        },
        [
          3.3,
          1.1,
          2.2,
        ],
        {
          3.3: 3.3,
          1.1: 1.1,
        },
      },
      4.4: 9.9,
      6.6: {
        3.3: 3.3,
        1.1: 1.1,
        7.7: [
          3.3,
          1.1,
          2.2,
        ],
      },
      8.8: [
        {
          2.2: 2.2,
          1.1: 1.1,
        },
        1.1,
        [
          1.1,
          2.2,
          3.3,
        ],
        {
          4.4,
          6.6,
          {
            3.3: 3.3,
            2.2: 2.2,
            1.1: 1.1,
          },
        },
      ],
    },
    9.9: {
      2.2: 2.2,
      1.1: 1.1,
    },
  };

  final expectedSortedByValues = {
    3: 1,
    3.3: 1.1,
    1: 3,
    1.1: 3.3,
    'a': 'aa',
    'c': 'cc',
    5.5: [2.2, 3.3, 5.5],
    'g': ['a', 'b', 'c'],
    5: [2, 3, 5, 5],
    4.4: {
      1.1,
      2.2,
      3.3,
      [1.1, 2.2, 3.3]
    },
    4: {
      1,
      2,
      3,
      [1, 2, 3]
    },
    'x': {
      'a',
      'b',
      'c',
      ['a', 'b', 'c']
    },
    9.9: {1.1: 1.1, 2.2: 2.2},
    9: {1: 1, 2: 2},
    'f': {'a': 'aa', 'b': 'bb'},
    2.2: {
      4.4: 9.9,
      8.8: [
        1.1,
        [1.1, 2.2, 3.3],
        {
          4.4,
          6.6,
          {1.1: 1.1, 2.2: 2.2, 3.3: 3.3}
        },
        {1.1: 1.1, 2.2: 2.2}
      ],
      1.1: {
        1.1,
        [1.1, 2.2, 3.3],
        {2.2, 3.3, 7.7},
        {1.1: 1.1, 3.3: 3.3}
      },
      6.6: {
        1.1: 1.1,
        3.3: 3.3,
        7.7: [1.1, 2.2, 3.3]
      }
    },
    2: {
      4: 9,
      8: [
        1,
        [1, 1, 2, 2, 3, 3],
        {
          4,
          6,
          {1: 1, 2: 2, 3: 3}
        },
        {1: 1, 2: 2}
      ],
      1: {
        1,
        [1, 2, 3, 3],
        {2, 3, 7},
        {1: 1, 3: 3}
      },
      6: {
        1: 1,
        3: 3,
        7: [1, 1, 1, 2, 3]
      }
    },
    'b': {
      'x': 'xx',
      'y': [
        'a',
        ['a', 'b', 'c'],
        {
          'x',
          'z',
          {'a': 'aa', 'b': 'bb', 'c': 'cc'}
        },
        {'a': 'aa', 'b': 'bb'}
      ],
      'a': {
        'a',
        ['a', 'b', 'c'],
        {'a', 'b', 'c'},
        {'a': 'aa', 'c': 'cc'}
      },
      'z': {
        'a': 'aa',
        'c': 'cc',
        'd': ['a', 'b', 'c']
      }
    }
  };

  test('sortByValue complex', () {
    final sortedMap = map.deepSortByValue();

    expect(sortedMap.toString(), equals(expectedSortedByValues.toString()));
  });
}
